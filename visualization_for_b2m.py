import matplotlib.pyplot as plt
import constants
from form_process import get_labels_csv_path_by_family, load_csv_to_array
from img_b2m import img_b2m, img_b2m_for_knn
from PIL import Image
from img_process import img_process, img_processed_for_knn
from utils import generate_img_path_by_family, get_file_length, generate_file_path, generate_img_path, load_file, save_img, is_folder_exists, create_folder, get_time_string


def main():
    visualizations()


def visualizations():
    generate_img_for_visualization_for_b2med_vs_processed(
        constants.dst_bytes, constants.ist_b2med, constants.ist_processed)

    generate_img_for_visualization_for_same_family(
        constants.dst_bytes, constants.lt, constants.ist_b2med, constants.ist_processed)

    img_visualization_for_b2med_vs_processed(
        constants.ist_b2med, constants.ist_processed, constants.ist_b2med_vs_processed, constants.EXAMPLE_LIST)

    img_visualization_for_same_family(
        constants.lt, constants.ist_b2med, constants.ist_b2med_for_same_family)

    img_visualization_for_same_family(
        constants.lt, constants.ist_processed, constants.ist_processed_for_same_family)

def generate_img_for_visualization_for_b2med_vs_processed(dst, ist_b2med, ist_processed):
    for id in constants.EXAMPLE_LIST:
        file_path = generate_file_path(dst, id)
        binary_file = load_file(file_path)
        binary_file_length = get_file_length(file_path)
        img_b2med = img_b2m(binary_file, binary_file_length, ist_b2med)
        save_img(img_b2med, ist_b2med, id)
        img_processed = img_process(img_b2med, ist_processed)
        save_img(img_processed, ist_processed, id)


def generate_img_for_visualization_for_same_family(dst, lt, ist_b2med, ist_processed):
    for serial_num in range(1, constants.FAMILY_NUM + 1):
        ids = get_ids_by_serial_num(serial_num, lt, 10)

        for id in ids:
            file_path = generate_file_path(dst, id)
            binary_file = load_file(file_path)
            binary_file_length = get_file_length(file_path)
            img_b2med = img_b2m(binary_file, binary_file_length, ist_b2med)
            save_img(img_b2med, ist_b2med, id)
            img_processed = img_process(img_b2med, ist_processed)
            save_img(img_processed, ist_processed, id)


def img_visualization_for_b2med_vs_processed(ist_b2med,
                                             ist_processed, ist_b2med_vs_processed, example_list):
    plt.figure(figsize=(10, 4))

    for i in range(len(example_list)):
        id = example_list[i]
        img_path_b2med = generate_img_path(ist_b2med, id)
        img_path_processed = generate_img_path(ist_processed, id)
        img_b2med = Image.open(img_path_b2med)
        img_processed = Image.open(img_path_processed)

        plt.subplot(2, len(example_list), i + 1)
        plt_set_param(constants.FAMILY_LIST[i], img_b2med)

        plt.subplot(2, len(example_list), i + 1 + len(example_list))
        plt_set_param('Processed', img_processed)

    plt.tight_layout(pad=0.5)
    if not is_folder_exists(ist_b2med_vs_processed.dir):
        create_folder(ist_b2med_vs_processed.dir)
    img_save_path = generate_img_path(
        ist_b2med_vs_processed, id=get_time_string())
    plt.savefig(img_save_path)


def img_visualization_for_same_family(lt, ist, ist_for_same_family):
    for serial_num in range(1, constants.FAMILY_NUM + 1):
        ids = get_ids_by_serial_num(serial_num, lt, 10)

        plt.figure(figsize=(len(ids), 4))

        for i in range(0, len(ids)):
            id = ids[i]
            img_path = generate_img_path(ist, id)
            img_b2med = Image.open(img_path)
            plt.subplot(1, len(ids), i + 1)
            if (i == 0):
                plt_set_param(
                    constants.FAMILY_LIST[serial_num-1], img_b2med)
            else:
                plt_set_param('', img_b2med)

        plt.tight_layout(pad=0.5)
        if not is_folder_exists(ist_for_same_family.dir):
            create_folder(ist_for_same_family.dir)
        img_save_path = generate_img_path_by_family(
            ist_for_same_family, serial_num, id=get_time_string())
        plt.savefig(img_save_path)


def get_ids_by_serial_num(serial_num, lt, num):
    label_csv_path = get_labels_csv_path_by_family(serial_num, lt)
    labels = load_csv_to_array(label_csv_path)
    ids = get_ids_by_labels(labels[1:num+1])
    return ids


def get_all_ids_by_serial_num(serial_num, lt):
    label_csv_path = get_labels_csv_path_by_family(serial_num, lt)
    labels = load_csv_to_array(label_csv_path)
    ids = get_ids_by_labels(labels)
    return ids 


def id_visualization_by_ids(ids):
    pass


def get_ids_by_labels(labels):
    ids = []
    for item in labels:
        ids.append(item[0])
    return ids


def plt_set_param(title, img):
    plt.tick_params(labelbottom=False, labelleft=False)
    plt.axis('off')
    plt.imshow(img, cmap='gray')
    plt.title(title, constants.FONT_DICT)


if __name__ == '__main__':
    main()
