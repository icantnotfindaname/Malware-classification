import constants
import os
import numpy as np
from form_process import get_csv_path, get_sample_size, load_csv_to_array, save_labels_to_csv_by_tuple, statistics_every_family_sample_size


def main():
    subset_process()


def subset_process():
    label_extraction_by_img_subset(constants.dst_subset, constants.lt_subset)
    statistics_every_family_sample_size(constants.lt_subset)


def label_extraction_by_img_subset(dst, lt):
    print("Extraction the labels by img subset...")
    labels = get_labels_by_img_subset(dst)
    save_labels_to_csv_by_tuple(lt, labels)
    print("Done.")


def get_labels_by_img_subset(dst):
    labels = []
    for i in range(1, constants.FAMILY_NUM + 1):
        path = get_subset_of_family_path(dst, i)
        l = os.listdir(path)
        for it in l:
            k = []
            id = it[:-4]
            label = i
            k.append(id)
            k.append(label)
            labels.append(k)
    return np.array(labels)


def statistics_every_family_sample_size(lt):
    print("Begin to statistics each family's sample_size.")

    txt_save_path = os.path.join(lt.dir,
                                 'family_sample_size.txt').replace("\\", "/")
    fw = open(txt_save_path, 'w')

    csv_path = get_csv_path(lt)
    labels = load_csv_to_array(csv_path)
    whole_subset_size = get_sample_size(csv_path)

    for n in range(1, constants.FAMILY_NUM + 1):
        size = 0
        for label in labels:
            if int(label[1]) == n:
                size += 1
        train_size = int(size * constants.TRAINING_DATA_RATIO)
        test_size = size - train_size
        fw.write('family: {} size: {} train_size: {} test_size: {} \n'.format(
            n, size, train_size, test_size))

    fw.write('whole subset size: {}'.format(whole_subset_size))
    print("Done.")


def get_subset_of_family_path(dst, serial_num):
    return os.path.join(dst.dir, str(serial_num)).replace("\\", "/")


if __name__ == "__main__":
    main()
