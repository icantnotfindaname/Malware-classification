# random forest
import numpy as np
import constants
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV, cross_val_score
from data_process import data_scaling_zero_mean
from tqdm import tqdm
from knn import get_attrs_by_glcm_attrs_result_csv, get_labels_by_glcm_attrs_result_csv
from model_process import save_rf_model


def main():
    rf()


def rf():
    training_attrs = get_attrs_by_glcm_attrs_result_csv(
        constants.rt_all_training_img_attrs_by_global_glcm)
    training_attrs_with_scaling = data_scaling_zero_mean(training_attrs)

    testing_attrs = get_attrs_by_glcm_attrs_result_csv(
        constants.rt_all_testing_img_attrs_by_global_glcm)
    testing_attrs_with_scaling = data_scaling_zero_mean(testing_attrs)

    training_labels = get_labels_by_glcm_attrs_result_csv(
        constants.rt_all_training_img_attrs_by_global_glcm)

    testing_labels = get_labels_by_glcm_attrs_result_csv(
        constants.rt_all_testing_img_attrs_by_global_glcm)

    best_random_forest(training_attrs_with_scaling, training_labels,
                       testing_attrs_with_scaling, testing_labels)


def best_random_forest(train_x, train_y, test_x, test_y):
    best_max_depth = 25
    best_n_estimators = 271
    best_max_features = 0.42
    # best_n_estimators = get_best_n_estimators(train_x, train_y)
    # best_max_depth = get_best_max_depth(train_x, train_y, best_n_estimators)
    # best_max_features = get_best_max_features(
    #     train_x, train_y, best_n_estimators, best_max_depth)
    
    rfc = RandomForestClassifier(n_estimators=best_n_estimators,
                                 random_state=90,
                                 max_depth=best_max_depth,
                                 max_features=best_max_features)
    rfc = rfc.fit(train_x, train_y)
    best_score = rfc.score(test_x, test_y)
    print(
        "The best_n_estimators: {}\nThe best_max_depth: {}\nThe best_max_features: {}\nThe best score: {}"
        .format(best_n_estimators, best_max_depth, best_max_features,
                best_score))

    save_rf_model(rfc, best_n_estimators, best_max_depth, best_max_features)
    print("The model has been saved to target path.")


def get_best_n_estimators(train_x, train_y):
    print("Start to get the best n_estimators...")
    first = get_first_n_estimators_range(train_x, train_y)
    second = get_second_n_estimators_range(train_x, train_y, first)
    return second


def get_best_max_depth(train_x, train_y, best_n_estimators):
    print("Start to get the best max depth...")
    rfc = RandomForestClassifier(n_estimators=best_n_estimators,
                                 random_state=90)
    param_grid = {'max_depth': np.arange(1, 26)}
    GS = GridSearchCV(rfc, param_grid, cv=10)
    GS.fit(train_x, train_y)
    best_max_depth = GS.best_params_['max_depth']
    return best_max_depth


def get_best_max_features(train_x, train_y, best_n_estimators, best_max_depth):
    print("Start to get the best max features...")
    param_grid = {'max_features': np.arange(0, 1, 0.01)}
    rfc = RandomForestClassifier(n_estimators=best_n_estimators,
                                 random_state=90,
                                 max_depth=best_max_depth)
    GS = GridSearchCV(rfc, param_grid, cv=10)
    GS.fit(train_x, train_y)
    best_max_features = GS.best_params_['max_features']
    return best_max_features


def get_first_n_estimators_range(train_x, train_y):
    print("Get n estimators - 1...")
    n_estimators_range = range(1, 301, 10)
    return get_max_n_estimators_by_range(train_x, train_y, n_estimators_range)


def get_second_n_estimators_range(train_x, train_y, first_n_estimators):
    print("Get n estimators - 2...")
    n_estimators_range = range(first_n_estimators - 20,
                               first_n_estimators + 20)
    return get_max_n_estimators_by_range(train_x, train_y, n_estimators_range)


def get_max_n_estimators_by_range(train_x, train_y, n_estimators_range):
    max_score = 0
    max_n_estimators = 1
    for i in tqdm(n_estimators_range):
        score = get_simple_train_score_of_rf(train_x, train_y, i)
        if score > max_score:
            max_score = score
            max_n_estimators = i + 1

    rfc = RandomForestClassifier(n_estimators=max_n_estimators,
                                 random_state=90)
    return max_n_estimators


def get_simple_train_score_of_rf(train_x, train_y, n_estimators):
    rfc = RandomForestClassifier(n_estimators=n_estimators, random_state=90)
    rfc = rfc.fit(train_x, train_y)
    score = cross_val_score(rfc, train_x, train_y, cv=10).mean()
    return score


if __name__ == '__main__':
    main()
