import os
from tqdm import main
import constants
from tqdm import tqdm
from img_b2m import img_b2m
from img_process import img_process
from utils import create_folder, generate_file_path, generate_img_dir_for_subset_by_family, generate_img_path_for_subset_by_dir, get_file_length, is_folder_exists, load_file, save_img
from visualization_for_b2m import get_all_ids_by_serial_num


def main():
    # generate_imgs_for_gist(constants.dst_bytes, constants.lt,
    #                        constants.ist_b2med, constants.ist_processed)
    generate_processed_imgs_for_subset_by_each_family(
        constants.dst_bytes, constants.lt, constants.ist_b2med,
        constants.ist_processed, constants.ist_processed_by_family)


def generate_imgs_for_gist(dst, lt, ist_b2med, ist_processed):
    print("Start to generate imgs for gist...")
    for serial_num in range(1, constants.FAMILY_NUM + 1):
        ids = get_all_ids_by_serial_num(serial_num, lt)

        for id in tqdm(ids):
            file_path = generate_file_path(dst, id)
            binary_file = load_file(file_path)
            binary_file_length = get_file_length(file_path)
            img_b2med = img_b2m(binary_file, binary_file_length, ist_b2med)
            img_processed = img_process(img_b2med, ist_processed)
            save_img(img_processed, ist_processed, id)
    print("Done.")


def generate_processed_imgs_for_subset_by_each_family(dst, lt, ist_b2med,
                                                      ist_processed,
                                                      ist_processed_by_family):
    print("Generate imgs by family...")
    for serial_num in range(1, constants.FAMILY_NUM + 1):
        ids = get_all_ids_by_serial_num(serial_num, lt)

        save_dir = generate_img_dir_for_subset_by_family(
            ist_processed_by_family, serial_num)

        for id in tqdm(ids):
            file_path = generate_file_path(dst, id)
            binary_file = load_file(file_path)
            binary_file_length = get_file_length(file_path)
            img_b2med = img_b2m(binary_file, binary_file_length, ist_b2med)
            img_processed = img_process(img_b2med, ist_processed)
            save_path = generate_img_path_for_subset_by_dir(
                ist_processed_by_family, save_dir, id)
            img_processed.save(save_path)
    print("Done.")


if __name__ == '__main__':
    main()
