from matplotlib import pyplot as plt
import numpy as np
from cProfile import label
from attr import attr
from sklearn.neighbors import KNeighborsClassifier
from data_process import data_scaling_zero_mean
from form_process import get_img_attrs_by_global_glcm_csv_path, load_csv_to_array
from constants import rt_all_training_img_attrs_by_global_glcm, rt_all_testing_img_attrs_by_global_glcm


def main():
    knn()


def knn():
    training_attrs = get_attrs_by_glcm_attrs_result_csv(
        rt_all_training_img_attrs_by_global_glcm)
    training_attrs_with_scaling = data_scaling_zero_mean(training_attrs)

    testing_attrs = get_attrs_by_glcm_attrs_result_csv(
        rt_all_testing_img_attrs_by_global_glcm)
    testing_attrs_with_scaling = data_scaling_zero_mean(testing_attrs)

    training_labels = get_labels_by_glcm_attrs_result_csv(
        rt_all_training_img_attrs_by_global_glcm)
    testing_labels = get_labels_by_glcm_attrs_result_csv(
        rt_all_testing_img_attrs_by_global_glcm)
        
    knn_with_auto_algorithm(training_attrs_with_scaling, training_labels,
                            testing_attrs_with_scaling, testing_labels)


def knn_with_auto_algorithm(train_x, train_y, test_x, test_y):
    print("Begin to use knn with auto algorithm.")
    test_y_ = test_y.ravel()
    max_score = 0
    best_k = 1
    score_l = []
    for k in range(1, 21):
        knn = KNeighborsClassifier(n_neighbors=k, algorithm='auto')
        knn.fit(train_x, train_y.ravel())
        predict_y = knn.predict(test_x)
        correct_num = np.count_nonzero((predict_y == test_y_) == True)
        score = correct_num / len(test_y_)
        score_l.append(score)
        if score > max_score:
            max_score = score
            best_k = k

    x = np.arange(1, 21)
    plt.subplot(111)
    plt.plot(x, score_l, 'r-')
    plt.show()

    print("The max score is: ", max_score)
    print("The best k is: ", best_k)
    print("Success to use knn with auto algorithm.")


def get_labels_by_glcm_attrs_result_csv(rt):
    labels = []
    arr = get_array_by_glcm_attrs_result_csv(rt)
    for item in arr:
        labels.append(item[1])
    labels = np.array(labels)
    return labels


def get_attrs_by_glcm_attrs_result_csv(rt):
    attrs = []
    arr = get_array_by_glcm_attrs_result_csv(rt)
    for item in arr:
        row = []
        for i in range(2, len(item)):
            row.append(item[i])
        attrs.append(row)
    attrs = np.array(attrs)
    return attrs


def get_array_by_glcm_attrs_result_csv(rt):
    csv_path = get_img_attrs_by_global_glcm_csv_path(rt)
    arr = load_csv_to_array(csv_path)
    return arr


if __name__ == '__main__':
    main()
