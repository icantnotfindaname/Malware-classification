import csv
import os
from cv2 import split
import pandas as pd
import numpy as np
import constants


def main():
    form_process(constants.lt)


def form_process(lt):
    csv_path_of_train_labels = get_csv_path(lt)
    split_csv_by_family(csv_path_of_train_labels, lt)
    statistics_every_family_sample_size(lt)
    split_labels_by_family_to_train_and_test(lt)


def split_labels_by_family_to_train_and_test(lt):
    print("Begin to split labels by family.")
    for n in range(1, constants.FAMILY_NUM + 1):
        csv_of_family_path = get_labels_csv_path_by_family(n, lt)
        labels_of_family_array = load_csv_to_array(csv_of_family_path)
        size = len(labels_of_family_array)
        spliting_point = int(size * constants.TRAINING_DATA_RATIO)
        train_labels_of_family_save_path = get_train_labels_of_family_path(
            n, lt)
        save_array_to_csv(labels_of_family_array[0:spliting_point],
                          csv_save_path=train_labels_of_family_save_path)
        test_labels_of_family_save_path = get_test_labels_of_family_path(n, lt)
        save_array_to_csv(labels_of_family_array[spliting_point:size],
                          csv_save_path=test_labels_of_family_save_path)
    print("Success to split labels by family.")


def split_csv_by_family(csv_path, lt):
    print("Begin to save the csv of each family's label.")
    arr = load_csv_to_array(csv_path)
    for n in range(1, constants.FAMILY_NUM + 1):
        llist = []
        for item in arr:
            if item[1] == n:
                llist.append(item)
        save_path = get_labels_csv_path_by_family(n, lt)
        save_array_to_csv(np.array(llist), ['ID', 'Class'], save_path)
    print("Success to save the csv of each family's label.")


def statistics_every_family_sample_size(lt):
    print("Begin to statistics each family's sample_size.")
    txt_save_path = os.path.join(lt.dir,
                                 'family_sample_size.txt').replace("\\", "/")
    fw = open(txt_save_path, 'w')
    whole_set_size = 0
    for n in range(1, constants.FAMILY_NUM + 1):
        csv_path = get_labels_csv_path_by_family(n, lt)
        size = get_sample_size(csv_path)
        whole_set_size += size
        train_size = int(size * constants.TRAINING_DATA_RATIO)
        test_size = size - train_size
        fw.write('family: {} size: {} train_size: {} test_size: {} \n'.format(
            n, size, train_size, test_size))

    fw.write('whole set size: {}'.format(whole_set_size))
    print("Done.")


def get_labels_csv_path_by_family(serial_num, lt):
    return os.path.join(
        lt.dir,
        lt.file_name + ' of family_' + str(serial_num) + lt.suffix).replace(
            '\\', '/')


def get_train_labels_of_family_path(serial_num, lt):
    return os.path.join(
        lt.dir, lt.file_name + ' of family_' + str(serial_num) + '_train' +
        lt.suffix).replace('\\', '/')


def get_test_labels_of_family_path(serial_num, lt):
    return os.path.join(
        lt.dir, lt.file_name + ' of family_' + str(serial_num) + '_test' +
        lt.suffix).replace('\\', '/')


def get_img_attrs_by_global_glcm_csv_path(rt):
    return os.path.join(rt.dir, rt.file_name + rt.suffix).replace('\\', '/')


def load_labels_to_array_by_tuple(lt):
    csv_path = get_csv_path(lt)
    return load_csv_to_array(csv_path)


def load_csv_to_list(csv_path):
    array = load_csv_to_array(csv_path)
    return array.tolist()


def load_csv_to_array(csv_path):
    csv_reader = pd.read_csv(csv_path)
    return np.array(csv_reader)


def load_csv_to_dict(csv_path):
    with open(csv_path, mode='r') as inp:
        reader = csv.reader(inp)
        dict_from_csv = {rows[0]: rows[1] for rows in reader}
    return dict_from_csv


def save_labels_to_csv_by_tuple(lt, labels, columns=['ID', 'Class']):
    csv_save_path = get_csv_path(lt)
    save_array_to_csv(labels, columns=columns, csv_save_path=csv_save_path)


def save_array_to_csv(arr,
                      columns=['ID', 'Class'],
                      csv_save_path='./csv/default.csv'):
    df = pd.DataFrame(columns=columns, data=arr)
    df.to_csv(csv_save_path, encoding='utf-8', index=False)


def get_sample_size(csv_path):
    arr = load_csv_to_array(csv_path)
    return arr.shape[0]


def get_csv_path(lt):
    return os.path.join(lt.dir, lt.file_name + lt.suffix).replace('\\', '/')


if __name__ == '__main__':
    main()
