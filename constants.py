from math import pi
from collections import namedtuple
import numpy as np
from sympy import true

DATASET_TUPLE = namedtuple('DATASET', ['dir', 'suffix'])
IMAGESET_TUPLE = namedtuple(
    'Imageset', ['dir', 'title', 'width', 'height', 'nbits', 'suffix'])
BINARY_FILE_TUPLE = namedtuple('BINARY_FILE', ['id', 'family'])
GLOBAL_GLCM_TUPLE = namedtuple('GLOBAL_GLCM_TUPLE', [
    'min_gray_value', 'max_gray_value', 'nbits', 'distances', 'angles',
    'isSymmetric'
])
LABEL_TUPLE = namedtuple('LABEL_TUPLE', ['dir', 'file_name', 'suffix'])
RESULT_TUPLE = namedtuple('RESULT_TUPLE', ['dir', 'file_name', 'suffix'])

FONT_DICT = {
    'family': 'Times New Roman',
    'weight': 'normal',
    'size': 12,
}

EXAMPLE_LIST = [
    '01kcPWA9K2BOxQeS5Rju', '01IsoiSMh5gxyDYTl4CB', '04BfoQRA6XEshiNuI7pF',
    '0qPGt4cRVk9NoiJgubf2', '0qjuDC7Rhx9rHkLlItAp', '02IOCvYEy8mjiuAQHax3',
    '09LXtWxm1EbK5uVqcQS3', '01SuzwMJEIXsK7A8dQbl', '01azqd4InC7m9JpocGv5'
]

FAMILY_LIST = [
    'Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur',
    'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak'
]

FAMILY_NUM = 9
TRAINING_DATA_RATIO = 0.8
dst_bytes = DATASET_TUPLE('./dataset/train', '.bytes')
ist_b2med = IMAGESET_TUPLE('./imageset/b2m', 'b2med', 1024, -1, 256, '.png')
ist_processed = IMAGESET_TUPLE('./imageset/processed', 'processed', 256, 256,
                               256, '.png')
ist_processed_by_family = IMAGESET_TUPLE('./imageset/imgs_divided_by_family',
                                         '', 0, 0, 0, '.png')
ist_b2med_vs_processed = IMAGESET_TUPLE('./imageset/b2med_vs_processed',
                                        'b2med_vs_processed', 0, 0, 0, '.png')
ist_b2med_for_same_family = IMAGESET_TUPLE('./imageset/b2med_for_same_family',
                                           'b2med_for_same_family', 0, 0, 0,
                                           '.png')
ist_processed_for_same_family = IMAGESET_TUPLE(
    './imageset/processed_for_same_family', 'processed_for_same_family', 0, 0,
    0, '.png')
ggt = GLOBAL_GLCM_TUPLE(0, 15, 128, [1, 2, 3, 4],
                        [0, np.pi / 4, np.pi / 2, np.pi * 3 / 4], true)
lt = LABEL_TUPLE('./csv', 'labels', '.csv')
rt_all_training_img_attrs_by_global_glcm = RESULT_TUPLE(
    './result', 'all_training_img_attrs_by_global_glcm', '.csv')
rt_all_testing_img_attrs_by_global_glcm = RESULT_TUPLE(
    './result', 'all_testing_img_attrs_by_global_glcm', '.csv')

MODEL_SAVE_PATH = './models'
'''
    --- partition glcm tuple ---
    dir: The working directory
    width: The width of the image generated by the B2M algorithm
    nbits: Grayscale value after normalization of the image
    nbits_: Grayscale value of the image after grayscale compression
    slide_windows: Width of sliding window when performing GLCM
    distances: The array of steps used to perform GLCM
    angles: Directional arrays used in performing GLCM
    isSymmetric: If True, the output matrix `P[:, :, d, theta]` is symmetric. This
        is accomplished by ignoring the order of value pairs, so both
        (i, j) and (j, i) are accumulated when (i, j) is encountered
        for a given offset. The default is False.
'''
PARTITION_GLCM_TUPLE = namedtuple('PARTITION_GLCM_TUPLE', [
    'original_width', 'original_bits', 'compression_bits', 'slide_windows',
    'distances', 'angles', 'isSymmetric'
])

# pgt = PARTITION_GLCM_TUPLE('')

dst_subset = DATASET_TUPLE('./subset', '.img')
lt_subset = LABEL_TUPLE('./subset', 'subset_labels', '.csv')