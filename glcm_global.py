from tabnanny import verbose
import numpy as np
import pandas as pd
from constants import FAMILY_NUM, lt, dst_bytes, rt_all_testing_img_attrs_by_global_glcm, ggt, rt_all_training_img_attrs_by_global_glcm
from skimage.feature import greycomatrix, greycoprops
from form_process import get_img_attrs_by_global_glcm_csv_path, get_test_labels_of_family_path, get_train_labels_of_family_path, load_csv_to_array, save_array_to_csv
from img_process import get_processed_img_by_original_file_id_for_knn
from tqdm import tqdm


def main():
    get_global_glcm()


def get_global_glcm():
    calcu_all_training_files_attrs_by_global_glcm(
            dst_bytes, lt, ggt, rt_all_training_img_attrs_by_global_glcm)
    calcu_all_testing_files_attrs_by_global_glcm(
        dst_bytes, lt, ggt, rt_all_testing_img_attrs_by_global_glcm)


def calcu_all_training_files_attrs_by_global_glcm(dst, lt, ggt, rt):
    print("Begin to calcu all training files' attrs by global glcm.")
    results = []
    for n in range(1, FAMILY_NUM + 1):
        csv_path = get_train_labels_of_family_path(n, lt)
        l = load_csv_to_array(csv_path)
        print("Begin to calcu family_{}. \n".format(n))
        for item in tqdm(l):
            row = []
            id = item[0]
            family_serial = item[1]
            attrs = get_all_glcm_attrs_by_original_file_id(dst, id, ggt)
            row.append(id)
            row.append(family_serial)
            for attr in attrs:
                row.append(attr)
            results.append(row)
    save_path = get_img_attrs_by_global_glcm_csv_path(rt)
    columns = ['ID', 'Class', 'contrast', 'homogeneity', 'correlation',
               'dissimilarity', 'asm', 'entropy', 'energy', 'mean', 'variance']
    save_array_to_csv(results, columns=columns, csv_save_path=save_path)
    print("Success to calcu all training files' attrs by global glcm.")


def calcu_all_testing_files_attrs_by_global_glcm(dst, lt, ggt, rt):
    print("Begin to calcu all testing files' attrs by global glcm.")
    results = []
    for n in range(1, FAMILY_NUM + 1):
        csv_path = get_test_labels_of_family_path(n, lt)
        l = load_csv_to_array(csv_path)
        print("Begin to calcu family_{}. \n".format(n))
        for item in tqdm(l):
            row = []
            id = item[0]
            family_serial = item[1]
            attrs = get_all_glcm_attrs_by_original_file_id(dst, id, ggt)
            row.append(id)
            row.append(family_serial)
            for attr in attrs:
                row.append(attr)
            results.append(row)
    save_path = get_img_attrs_by_global_glcm_csv_path(rt)
    columns = ['ID', 'Class', 'contrast', 'homogeneity', 'correlation',
               'dissimilarity', 'asm', 'entropy', 'energy', 'mean', 'variance']
    save_array_to_csv(results, columns=columns, csv_save_path=save_path)
    print("Success to calcu all testing files' attrs by global glcm.")


def get_all_glcm_attrs_by_original_file_id(dst, id, ggt):
    processed_img = get_processed_img_by_original_file_id_for_knn(dst, id)
    attrs = get_all_attrs_by_img(processed_img, ggt)
    return attrs


def get_all_attrs_by_img(processed_img, ggt):
    global_grey_matrix = calcu_global_glcm(processed_img, ggt)
    attrs = get_all_attrs_by_glcm(global_grey_matrix)
    return attrs


def calcu_global_glcm(img_arr, ggt):
    bins = np.linspace(ggt.min_gray_value,
                       ggt.max_gray_value + 1, ggt.nbits + 1)
    img_compressed = np.digitize(img_arr, bins) - 1

    global_grey_comatrix = greycomatrix(
        img_compressed, ggt.distances, ggt.angles, levels=ggt.nbits, symmetric=True)
    return global_grey_comatrix


def get_all_attrs_by_glcm(grey_comatrix):
    evalues = get_evalues_all(grey_comatrix)
    attrs = calcu_attrs_by_evalues(grey_comatrix, evalues)
    return attrs


'''
  Most important six attrs:
    contrast, homogeneity, correlation, dissimilarity, asm, entropy
    
'''
def get_main_attrs_by_glcm(grey_comatrix):
    evalues = get_evalues_main(grey_comatrix)
    attrs = calcu_attrs_by_evalues(grey_comatrix, evalues)
    return attrs


def get_evalues_main(grey_comatrix):
    evalues = []
    evalues.append(greycoprops(grey_comatrix, prop='contrast'))
    evalues.append(greycoprops(grey_comatrix, prop='homogeneity'))
    evalues.append(greycoprops(grey_comatrix, prop='correlation'))
    evalues.append(greycoprops(grey_comatrix, prop='dissimilarity'))
    evalues.append(greycoprops(grey_comatrix, prop='ASM'))
    evalues.append(greycoprops(grey_comatrix, prop='entropy'))
    return evalues


def get_evalues_all(grey_comatrix):
    evalues = get_evalues_main(grey_comatrix)
    evalues.append(greycoprops(grey_comatrix, prop='energy'))
    evalues.append(greycoprops(grey_comatrix, prop='mean'))
    evalues.append(greycoprops(grey_comatrix, prop='variance'))
    return evalues


def calcu_attrs_by_evalues(grey_comatrix, evalues):
    attrs = []
    for e in evalues:
        sum = 0
        for i in range(grey_comatrix.shape[2]):
            for j in range(grey_comatrix.shape[3]):
                sum += e[i][j]
        mean = sum / (grey_comatrix.shape[2] * grey_comatrix.shape[3])
        attrs.append(mean)
    return attrs


if __name__ == '__main__':
    main()
