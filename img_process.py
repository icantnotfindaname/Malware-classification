import math
import numpy as np
from PIL import Image
from img_b2m import img_b2m, img_b2m_for_knn
from utils import generate_file_path, get_file_length, load_file
from constants import ist_b2med, ist_processed


def get_processed_img_by_original_file_id(dst, id):
    file_path = generate_file_path(dst, id)
    binary_file = load_file(file_path)
    binary_file_length = get_file_length(file_path)
    img_b2med = img_b2m(binary_file, binary_file_length, ist_b2med)
    img_processed = img_process(img_b2med, ist_processed)
    return img_processed


def get_processed_img_by_original_file_id_for_knn(dst, id):
    file_path = generate_file_path(dst, id)
    binary_file = load_file(file_path)
    binary_file_length = get_file_length(file_path)
    img_b2med_for_knn = img_b2m_for_knn(binary_file, binary_file_length)
    img_processed = img_processed_for_knn(img_b2med_for_knn)
    return img_processed


def img_process(img, ist_processed):
    img_initial = img
    img_resized = img_initial.resize(
        (ist_processed.width, ist_processed.height))
    img_resized = np.uint8(img_resized)
    mean = np.mean(img_resized)
    std = np.std(img_resized)
    img_standardized = (img_resized - mean) / max(std, 1.0 /
                                                  math.sqrt(ist_processed.width * ist_processed.height))
    img_standardized = img_resized
    img_normalized = np.uint8(256 * (img_standardized - np.min(
        img_standardized)) / (np.max(img_standardized) - np.min(img_standardized)))
    img_processed = Image.fromarray(img_normalized)
    return img_processed


def img_processed_for_knn(img_arr):
    img_normalized_arr = 255 * (img_arr -
                            np.min(img_arr)) / (np.max(img_arr) - np.min(img_arr))
    return img_normalized_arr
